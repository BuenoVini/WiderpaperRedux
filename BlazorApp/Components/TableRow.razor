<tr>
	<td class="align-middle">
		<button @onclick="@OnClickDeleteRowBtnAsync" class="btn">
			<i class="bi bi-trash-fill text-danger"></i>
		</button>
	</td>
	<td>
		<img src=@Image.PathThumbnail.Replace("wwwroot/", "") class="thumbnail figure-img img-fluid rounded my-1" alt="...">
	</td>
	<td>
		@Image.Width x @Image.Height px
		<br />

		@Math.Round(Image.Width * Image.Height / 1e6, 2, MidpointRounding.ToEven) MP
		<br />

		@if (Image.Size >= 0 && Image.Size < 1e3)
		{
			<span>@Image.Size Bytes</span>
		}
		else if (Image.Size < 1e6)
		{
			<span>@Math.Round(Image.Size / 1024f, 2, MidpointRounding.ToEven) KB</span>
		}
		else if (Image.Size < 1e9)
		{
			<span>@Math.Round(Image.Size / (1024 * 1024f), 2, MidpointRounding.ToEven) MB</span>
		}
	</td>
	<td>
		@{
			int upscaling = UpscalingChosen switch
			{
				Pages.Index.Upscaling.Original => 1,
				Pages.Index.Upscaling.TwoTimes => 2,
				Pages.Index.Upscaling.FourTimes => 3,
				_ => throw new ArgumentOutOfRangeException()
			};

			int newHeight = upscaling * Image.Height;
			int newWidth = newHeight * 21 / 9;
			
			float newSize = upscaling * Image.Size;
		}

		@newWidth x @newHeight px
		<br />

		@Math.Round(newWidth * newHeight / 1e6, 2, MidpointRounding.ToEven) MP
		<br />

		@if (newSize >= 0 && newSize < 1e3)
		{
			<span>@newSize Bytes</span>
		}
		else if (newSize < 1e6)
		{
			<span>@Math.Round(newSize / 1024f, 2, MidpointRounding.ToEven) KB</span>
		}
		else if (newSize < 1e9)
		{
			<span>@Math.Round(newSize / (1024 * 1024f), 2, MidpointRounding.ToEven) MB</span>
		}
	</td>
	<td class="align-middle">
		@switch (Image.State)
		{
			case WiderpaperMetadata.ProcessingState.Loaded:
				<i class="bi bi-hourglass-top"></i>
				break;
			
			case WiderpaperMetadata.ProcessingState.Processing:
				<div class="spinner-border text-primary" role="status">
					<span class="visually-hidden">Loading...</span>
				</div>
				break;
				
			case WiderpaperMetadata.ProcessingState.Done:
				<div class="vstack gap-2">
					<SpanTooltip Message="View processed image">
						<button @onclick="@OnClickViewProcessedImageBtnAsync" class="btn btn-sm btn-outline-success w-75">
							<i class="bi bi-eye-fill"></i>
						</button>
					</SpanTooltip>

					<SpanTooltip Message="Open Widerpaper folder">
						<button @onclick="@OnClickOpenOutputFolderBtnAsync" class="btn btn-sm btn-outline-primary w-75">
                        	<i class="bi bi-box-arrow-up-right"></i>
                        </button>
					</SpanTooltip>
				</div>
				break;
			
			default:
				throw new ArgumentOutOfRangeException();
		}
	</td>
</tr>

@code {
	[Parameter, EditorRequired] public WiderpaperMetadata Image { get; set; }
	[Parameter, EditorRequired] public Pages.Index.Upscaling UpscalingChosen { get; set; }

	[Parameter, EditorRequired] public EventCallback<WiderpaperMetadata> OnClickDeleteRowBtnCallback { get; set; }
	[Parameter, EditorRequired]	public EventCallback<WiderpaperMetadata> OnClickViewProcessedImageBtnCallback { get; set; }
	[Parameter, EditorRequired]	public EventCallback<WiderpaperMetadata> OnClickOpenOutputFolderBtnCallback { get; set; }

	private async Task OnClickDeleteRowBtnAsync() => await OnClickDeleteRowBtnCallback.InvokeAsync(Image);
	private async Task OnClickViewProcessedImageBtnAsync() => await OnClickViewProcessedImageBtnCallback.InvokeAsync(Image);
	private async Task OnClickOpenOutputFolderBtnAsync() => await OnClickOpenOutputFolderBtnCallback.InvokeAsync(Image);
}
