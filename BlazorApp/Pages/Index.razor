@page "/"

@using BlazorApp.Components
@using Widerpaper

<div class="container">
    <div>
        <h1 style="font-size: 41px;" class="text-center"><strong>Widerpaper</strong> <span style="font-weight: lighter">Redux</span></h1>
        <p class="text-center">
            <small>
                Made with ❤️ by
                <a class="icon-link" href="https://github.com/BuenoVini" target="_blank">
                    Vini Bueno
                    <i class="bi bi-github mb-2" style="font-size: 1.1em;"></i>
                </a>
            </small>
        </p>
    </div>

    <div class="row my-4">
        <h4>
            <label for="inputImage" class="form-label">
                Step 1: Choose an image
            </label>
        </h4>
        <InputFile OnChange="OnSelectImageAsync" class="form-control" id="inputImage" disabled="@_isProcessingImage" accept=".jpg, .png" />
    </div>

    <hr />

    <div class="row my-4">
        <h4>
            <label for="selectAlgorithm" class="form-label">
                Step 2: Choose an algorithm
            </label>
        </h4>
        <select id="selectAlgorithm" @onchange="OnChangeAlgorithm" class="form-select" aria-label="Select an algorithm" disabled="@_isProcessingImage">
            <option selected value="0">Simple Mirror</option>
            <option value="1">Mirror with Blur</option>
        </select>
        <div class="alert alert-dark" role="alert">
            @switch (_algorithmChosen)
            {
                case Algorithm.SimpleMirror:
                    <p>This algorithm mirrors the left and right side of the image until it reaches the Ultrawide aspect ratio (21:9).</p>
                    <hr />
                    <p><strong>Use this when:</strong> you have an image with solid background color or repeating pattern.</p>
                    break;

                case Algorithm.BlurMirror:
                    <p>This algorithm mirrors the left and right side of the image until it reaches the Ultrawide aspect ratio (21:9). The mirrored area is then blurred with Gaussian Blur.</p>
                    <hr />
                    <label for="blurStrenght" class="form-label"><b>Blur Strenght:</b> @(_blurStrenght * 2)%</label>
                    <input @oninput="OnChangeBlurStrenght" type="range" class="form-range" id="blurStrenght" value=@_blurStrenght min="5" max="50" step="5" disabled="@_isProcessingImage">
                    <div class="form-check form-switch mt-3">
                        <input @onchange="OnChangeBlurTransition" checked="@_shouldBlurTransition" class="form-check-input" type="checkbox" role="switch" id="flexSwitchCheck" disabled="@_isProcessingImage">
                        <label class="form-check-label" for="flexSwitchCheck">Apply blur transition?</label>
                    </div>
                    <hr />
                    <p><strong>Use this when:</strong> the image background is not even or you start seeing too many repeating pattern from the Simple Mirror algorithm.</p>
                    break;

                default:
                    <p>Some error happened... Try again!</p>
                    break;
            }
        </div>
    </div>

    <hr />

    <div class="row my-4">
        <h4>
            <label for="buttonProcessImage" class="form-label">
                Step 3: Generate Ultrawide image
            </label>
        </h4>
        <div class="alert alert-dark text-center" role="alert">
            Your images will be saved in <code>'MyPictures/Widerpaper'</code>
        </div>
        <button @onclick="@ProcessImageAsync" id="buttonProcessImage" type="button" class="btn btn-primary" disabled="@_isProcessingImage">
            @if (!_isProcessingImage)
            {
                <span>Start processing</span>
            }
            else
            {
                <span class="spinner-border spinner-border-sm" aria-hidden="true"></span>
                <span role="status">Processing your image...</span>
            }
        </button>
    </div>

    <div class="toast-container position-fixed bottom-0 end-0 p-3">
        <Toast @ref="_toastFinishedProcessing" Title="Your Ultrawide image has been saved!" ToastValidation="Toast.Validation.Success">
            <Body>
                <div class="row">
                    <div class="col-6 d-grid gap-2">
                        <button @onclick="OpenProcessedImageAsync" type="button" class="btn btn-outline-success btn-sm">Preview</button>
                    </div>
                    <div class="col-6 d-grid gap-2">
                        <button @onclick="OpenWiderpaperImageFolderAsync" type="button" class="btn btn-outline-success btn-sm">Open folder</button>
                    </div>
                </div>
            </Body>
        </Toast>

        <Toast @ref="_toastUnselectedFile" Title="No file selected" ToastValidation="Toast.Validation.Error">
            <Body>
                <p>Before you can begin processing, first you have to choose a target image.</p>
                Do so by following <strong>Step 1</strong>.
            </Body>
        </Toast>

        <Toast @ref="_toastUnsupportedFile" Title="Unsupported file" ToastValidation="Toast.Validation.Error">
            <Body>
                <p>The file chosen is not a valid format.</p>
                Please, select another image.
            </Body>
        </Toast>

        <Toast @ref="_toastFileTooLarge" Title="File is too large" ToastValidation="Toast.Validation.Error">
            <Body>
                <p>The file chosen exceeds the maximum allowed size.</p>
                Please, select an image up to 10MB.
            </Body>
        </Toast>
    </div>
</div>

@code {
    private Toast _toastFinishedProcessing;
    private Toast _toastUnselectedFile;
    private Toast _toastUnsupportedFile;
    private Toast _toastFileTooLarge;

    private enum Algorithm { None = -1, SimpleMirror, BlurMirror }
    private Algorithm _algorithmChosen = Algorithm.SimpleMirror;

    //private string _inputFilePath; /* BUG in MAUI Blazor App when using LocalApplicationData. See: https://github.com/dotnet/runtime/issues/74884 */
    private string _inputFileName;
    private int _blurStrenght = 25;

    private bool _shouldBlurTransition = true;
    private bool _isProcessingImage = false;

    private string GetWiderpaperFolderPath(Environment.SpecialFolder specialFolder)
    {
        string folderPath = Path.Combine(Environment.GetFolderPath(specialFolder), "Widerpaper");

        if (!Directory.Exists(folderPath))
            Directory.CreateDirectory(folderPath);

        return folderPath;
    }

    private async Task OnSelectImageAsync(InputFileChangeEventArgs e)
    {
        const int MAX_FILE_SIZE = 10 * 1024 * 1024;
        if (e.File.Size > MAX_FILE_SIZE)
            await _toastFileTooLarge.ShowToastAsync();

        _inputFileName = e.File.Name;

        string _inputFilePath;  // TODO: delete this line when BUG is fixed: https://github.com/dotnet/runtime/issues/74884
        _inputFilePath = Path.Combine(GetWiderpaperFolderPath(Environment.SpecialFolder.LocalApplicationData), "temp.jpg");

        await using FileStream stream = new(_inputFilePath, FileMode.Create);
        await e.File.OpenReadStream(MAX_FILE_SIZE).CopyToAsync(stream);
    }

    private void OnChangeAlgorithm(ChangeEventArgs e)
    {
        int temp;
        if (!int.TryParse(e.Value.ToString(), out temp))
            temp = -1;

        _algorithmChosen = (Algorithm)temp;
    }

    private void OnChangeBlurStrenght(ChangeEventArgs e)
    {
        if (!int.TryParse(e.Value.ToString(), out _blurStrenght))
            _blurStrenght = 5;
    }

    private void OnChangeBlurTransition(ChangeEventArgs e)
    {
        if (!bool.TryParse(e.Value.ToString(), out _shouldBlurTransition))
            _shouldBlurTransition = false;
    }

    private async Task ProcessImageAsync()
    {
        if (string.IsNullOrEmpty(_inputFileName))
        {
            await _toastUnselectedFile.ShowToastAsync();
            return;
        }

        _isProcessingImage = true;

        string _inputFilePath = Path.Combine(GetWiderpaperFolderPath(Environment.SpecialFolder.LocalApplicationData), "temp.jpg");  // TODO: delete this line when BUG is fixed: https://github.com/dotnet/runtime/issues/74884
        try
        {
            using WiderpaperImage imgInput = new(_inputFilePath);
            WiderpaperImage imgOutput;

            using (imgOutput = new())
            {
                switch (_algorithmChosen)
                {
                    case Algorithm.SimpleMirror:
                        imgOutput = WiderpaperProcessing.ApplyMirror(imgInput);
                        break;

                    case Algorithm.BlurMirror:
                        await Task.Run(() => imgOutput = _shouldBlurTransition ? WiderpaperProcessing.ApplyGradientBlurMirror(imgInput, _blurStrenght) : WiderpaperProcessing.ApplyBlurMirror(imgInput, _blurStrenght));
                        break;
                }
            }

            imgOutput.SaveImage(Path.Combine(GetWiderpaperFolderPath(Environment.SpecialFolder.MyPictures), "(21-9) " + _inputFileName));

            await _toastFinishedProcessing.ShowToastAsync();
        }
        catch (WiderpaperException)
        {
            await _toastUnsupportedFile.ShowToastAsync();
        }

        _isProcessingImage = false;
    }

    private async Task OpenWiderpaperImageFolderAsync() => await Launcher.Default.OpenAsync(GetWiderpaperFolderPath(Environment.SpecialFolder.MyPictures));

    private async Task OpenProcessedImageAsync() => await Launcher.Default.OpenAsync(Path.Combine(GetWiderpaperFolderPath(Environment.SpecialFolder.MyPictures), "(21-9) " + _inputFileName));
}